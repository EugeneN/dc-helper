// Generated by CoffeeScript 1.6.0
(function() {
  var debug, dispatch_impl, error, info, warn, _isNaN, _ref,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice;

  dispatch_impl = require('libprotocol').dispatch_impl;

  _ref = dispatch_impl('ILogger', 'IHelper'), info = _ref.info, warn = _ref.warn, error = _ref.error, debug = _ref.debug;

  _isNaN = function(v) {
    return v !== v;
  };

  module.exports = {
    protocols: {
      definitions: {
        IHelper: [
          ['len', ['array']], ['add', ['vector']], ['drop', ['items_vec', 'cur_item']], ['swap', ['items_vec', 'cur_item']], ['inc', ['val']], ['dec', ['val']], ['->->->', ['a']], [
            'say', ['msgs', 'more'], {
              vargs: true
            }
          ], [
            'info', ['msgs', 'more'], {
              vargs: true
            }
          ], [
            'warn', ['msgs', 'more'], {
              vargs: true
            }
          ], [
            'error', ['msgs', 'more'], {
              vargs: true
            }
          ], [
            'debug', ['msgs', 'more'], {
              vargs: true
            }
          ], ['not', ['a']], ['stop!', []], ['stop?', ['patrn', 'val']], [
            'wait', ['timeout'], {
              async: true
            }
          ], ['random', []], ['push-to-google', ['vec']], ['###', ['blk', 'args']], ['wrap', ['tpl', 'pattern', 'value']]
        ]
      },
      implementations: {
        IHelper: function(node) {
          return {
            wrap: function(t, p, v) {
              return t.replace(p, v);
            },
            '###': function(block, args) {
              return args;
            },
            'push-to-google': function(p) {
              debug('push-to-google', p);
              return push_to_google.apply(null, p);
            },
            random: function() {
              return Math.random();
            },
            len: function(array) {
              return array.length || 0;
            },
            wait: function(timeout, cont) {
              debug("waiting " + timeout + "ms");
              return setTimeout(function() {
                debug("waiting done");
                return cont();
              }, timeout);
            },
            not: function(a) {
              return !a;
            },
            "stop!": function() {
              debug("Stop!");
              return null;
            },
            "stop?": function(p, v) {
              if (p === v) {
                debug("Cond stop " + p + " == " + v);
                return null;
              } else {
                return v;
              }
            },
            add: function(vec) {
              return vec.reduce(function(a, b) {
                return (parseInt(a, 10)) + (parseInt(b, 10));
              });
            },
            drop: function(items, item) {
              var item_is_in_items;
              item_is_in_items = _isNaN(item) ? !!(items.filter(function(i) {
                return _isNaN(i);
              })).length : __indexOf.call(items, item) >= 0;
              if (item_is_in_items) {
                return null;
              } else {
                return item;
              }
            },
            swap: function(_arg, item) {
              var from, to;
              from = _arg[0], to = _arg[1];
              if (((_isNaN(item)) && (_isNaN(from))) || (item === from)) {
                return to;
              } else {
                return item;
              }
            },
            '->->->': function(a) {
              debug("[->->->]", a);
              return a;
            },
            info: info,
            error: error,
            warn: warn,
            debug: function() {
              var a;
              a = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
              return debug.apply(null, a);
            },
            say: info,
            inc: function(v) {
              return parseInt(v, 10) + 1;
            },
            dec: function(v) {
              return parseInt(v, 10) - 1;
            }
          };
        }
      }
    }
  };

}).call(this);
